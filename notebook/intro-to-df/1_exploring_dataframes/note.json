{
  "paragraphs": [
    {
      "text": "%md ## Exploring DataFrames\r\n\r\n\u003chttp://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.DataFrame\u003e",
      "authenticationInfo": {},
      "dateUpdated": "Apr 30, 2016 12:11:30 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904592077_-1499249220",
      "id": "20160417-144952_942646845",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch2\u003eExploring DataFrames\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.DataFrame\"\u003ehttp://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.DataFrame\u003c/a\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "Apr 17, 2016 2:49:52 PM",
      "dateStarted": "Apr 30, 2016 12:11:30 PM",
      "dateFinished": "Apr 30, 2016 12:11:30 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md ### Showing the schema of a DataFrame\r\nThe first important thing to know when working with a new DataFrame, is its schema. In order to show it, you can use the printSchema method. This method will print the field names, types, and whether they are nullable or not.",
      "authenticationInfo": {},
      "dateUpdated": "Apr 30, 2016 12:11:32 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904606616_2138951703",
      "id": "20160417-145006_535786469",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eShowing the schema of a DataFrame\u003c/h3\u003e\n\u003cp\u003eThe first important thing to know when working with a new DataFrame, is its schema. In order to show it, you can use the printSchema method. This method will print the field names, types, and whether they are nullable or not.\u003c/p\u003e\n"
      },
      "dateCreated": "Apr 17, 2016 2:50:06 PM",
      "dateStarted": "Apr 30, 2016 12:11:32 PM",
      "dateFinished": "Apr 30, 2016 12:11:32 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val clickstreamDf \u003d sqlContext.read.parquet(\"clickstream_df.parquet\")\nclickstreamDf.printSchema",
      "authenticationInfo": {},
      "dateUpdated": "May 17, 2016 3:25:00 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904636368_424941326",
      "id": "20160417-145036_694605405",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "clickstreamDf: org.apache.spark.sql.DataFrame \u003d [prev_id: int, curr_id: int, n: int, prev_title: string, curr_title: string, type: string]\nroot\n |-- prev_id: integer (nullable \u003d true)\n |-- curr_id: integer (nullable \u003d true)\n |-- n: integer (nullable \u003d true)\n |-- prev_title: string (nullable \u003d true)\n |-- curr_title: string (nullable \u003d true)\n |-- type: string (nullable \u003d true)\n\n"
      },
      "dateCreated": "Apr 17, 2016 2:50:36 PM",
      "dateStarted": "May 17, 2016 3:25:00 PM",
      "dateFinished": "May 17, 2016 3:25:01 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md ### Showing rows in a DataFrame: the \"show\" action\r\nOne of the most common operations you\u0027ll perform when you explore data is, of course, showing it. By default, *show* will print the first 20 rows of the DataFrame",
      "authenticationInfo": {},
      "dateUpdated": "Apr 30, 2016 12:11:35 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904657462_-1936465178",
      "id": "20160417-145057_484595045",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eShowing rows in a DataFrame: the \u0026ldquo;show\u0026rdquo; action\u003c/h3\u003e\n\u003cp\u003eOne of the most common operations you\u0027ll perform when you explore data is, of course, showing it. By default, \u003cem\u003eshow\u003c/em\u003e will print the first 20 rows of the DataFrame\u003c/p\u003e\n"
      },
      "dateCreated": "Apr 17, 2016 2:50:57 PM",
      "dateStarted": "Apr 30, 2016 12:11:35 PM",
      "dateFinished": "Apr 30, 2016 12:11:35 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "clickstreamDf.show",
      "authenticationInfo": {},
      "dateUpdated": "May 17, 2016 3:23:39 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904669859_826816747",
      "id": "20160417-145109_2023015032",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "\u003cconsole\u003e:32: error: not found: value clickstreamDf\n              clickstreamDf.show\n              ^\n"
      },
      "dateCreated": "Apr 17, 2016 2:51:09 PM",
      "dateStarted": "May 17, 2016 3:23:39 PM",
      "dateFinished": "May 17, 2016 3:23:39 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md We can show any number of values we want, just providing it as a parameter",
      "authenticationInfo": {},
      "dateUpdated": "Apr 17, 2016 2:51:46 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904688179_-437068065",
      "id": "20160417-145128_486180852",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eWe can show any number of values we want, just providing it as a parameter\u003c/p\u003e\n"
      },
      "dateCreated": "Apr 17, 2016 2:51:28 PM",
      "dateStarted": "Apr 17, 2016 2:51:42 PM",
      "dateFinished": "Apr 17, 2016 2:51:43 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "clickstreamDf.show(18)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 17, 2016 2:51:55 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904702968_1180831708",
      "id": "20160417-145142_1845763465",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "+--------+--------+---+--------------------+--------------------+-------+\n| prev_id| curr_id|  n|          prev_title|          curr_title|   type|\n+--------+--------+---+--------------------+--------------------+-------+\n|    null| 9003666|109|     other-wikipedia|\"And\"_theory_of_c...|  other|\n|    null| 9003666| 18|        other-google|\"And\"_theory_of_c...|  other|\n|    null|39072529| 49|        other-google|\"Bassy\"_Bob_Brock...|  other|\n|    null|39072529| 10|         other-other|\"Bassy\"_Bob_Brock...|  other|\n|11273993|    null| 15|Colt_1851_Navy_Re...|   \"Bigfoot\"_Wallace|redlink|\n|12571133|25033979| 12|   \"V\"_Is_for_Vagina|\"C\"_is_for_(Pleas...|   link|\n|  113468|25033979| 24|         The_Mission|\"C\"_is_for_(Pleas...|   link|\n|14096078|25033979| 15|Trent_Reznor_disc...|\"C\"_is_for_(Pleas...|  other|\n|    null|25033979| 42|         other-empty|\"C\"_is_for_(Pleas...|  other|\n| 1375614|25033979| 15|     Tapeworm_(band)|\"C\"_is_for_(Pleas...|  other|\n|  159547|25033979| 25|      Milla_Jovovich|\"C\"_is_for_(Pleas...|  other|\n|28639397|25033979| 73|Sound_into_Blood_...|\"C\"_is_for_(Pleas...|   link|\n| 1893465|25033979| 30|        Carina_Round|\"C\"_is_for_(Pleas...|  other|\n|33622887|25033979| 10|Conditions_of_My_...|\"C\"_is_for_(Pleas...|   link|\n|  147692|25033979| 25|       Tim_Alexander|\"C\"_is_for_(Pleas...|  other|\n| 4619790|25033979|593|            Puscifer|\"C\"_is_for_(Pleas...|   link|\n|    null|25033979| 36|     other-wikipedia|\"C\"_is_for_(Pleas...|  other|\n|    null|25033979| 93|        other-google|\"C\"_is_for_(Pleas...|  other|\n+--------+--------+---+--------------------+--------------------+-------+\nonly showing top 18 rows\n\n"
      },
      "dateCreated": "Apr 17, 2016 2:51:42 PM",
      "dateStarted": "Apr 17, 2016 2:51:55 PM",
      "dateFinished": "Apr 17, 2016 2:51:56 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md Did you notice that some of the values are truncated? That\u0027s because only the first 20 characters of a value are shown. However, we can show the full values, by providing a setting the truncate argument to false",
      "authenticationInfo": {},
      "dateUpdated": "Apr 17, 2016 2:52:10 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904715878_1345534885",
      "id": "20160417-145155_440778988",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eDid you notice that some of the values are truncated? That\u0027s because only the first 20 characters of a value are shown. However, we can show the full values, by providing a setting the truncate argument to false\u003c/p\u003e\n"
      },
      "dateCreated": "Apr 17, 2016 2:51:55 PM",
      "dateStarted": "Apr 17, 2016 2:52:08 PM",
      "dateFinished": "Apr 17, 2016 2:52:08 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "clickstreamDf.show(18, truncate \u003d false)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 17, 2016 2:52:24 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904728007_-983534097",
      "id": "20160417-145208_1960500728",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "+--------+--------+---+--------------------------+--------------------------------------------------------------+-------+\n|prev_id |curr_id |n  |prev_title                |curr_title                                                    |type   |\n+--------+--------+---+--------------------------+--------------------------------------------------------------+-------+\n|null    |9003666 |109|other-wikipedia           |\"And\"_theory_of_conservatism                                  |other  |\n|null    |9003666 |18 |other-google              |\"And\"_theory_of_conservatism                                  |other  |\n|null    |39072529|49 |other-google              |\"Bassy\"_Bob_Brockmann                                         |other  |\n|null    |39072529|10 |other-other               |\"Bassy\"_Bob_Brockmann                                         |other  |\n|11273993|null    |15 |Colt_1851_Navy_Revolver   |\"Bigfoot\"_Wallace                                             |redlink|\n|12571133|25033979|12 |\"V\"_Is_for_Vagina         |\"C\"_is_for_(Please_Insert_Sophomoric_Genitalia_Reference_HERE)|link   |\n|113468  |25033979|24 |The_Mission               |\"C\"_is_for_(Please_Insert_Sophomoric_Genitalia_Reference_HERE)|link   |\n|14096078|25033979|15 |Trent_Reznor_discography  |\"C\"_is_for_(Please_Insert_Sophomoric_Genitalia_Reference_HERE)|other  |\n|null    |25033979|42 |other-empty               |\"C\"_is_for_(Please_Insert_Sophomoric_Genitalia_Reference_HERE)|other  |\n|1375614 |25033979|15 |Tapeworm_(band)           |\"C\"_is_for_(Please_Insert_Sophomoric_Genitalia_Reference_HERE)|other  |\n|159547  |25033979|25 |Milla_Jovovich            |\"C\"_is_for_(Please_Insert_Sophomoric_Genitalia_Reference_HERE)|other  |\n|28639397|25033979|73 |Sound_into_Blood_into_Wine|\"C\"_is_for_(Please_Insert_Sophomoric_Genitalia_Reference_HERE)|link   |\n|1893465 |25033979|30 |Carina_Round              |\"C\"_is_for_(Please_Insert_Sophomoric_Genitalia_Reference_HERE)|other  |\n|33622887|25033979|10 |Conditions_of_My_Parole   |\"C\"_is_for_(Please_Insert_Sophomoric_Genitalia_Reference_HERE)|link   |\n|147692  |25033979|25 |Tim_Alexander             |\"C\"_is_for_(Please_Insert_Sophomoric_Genitalia_Reference_HERE)|other  |\n|4619790 |25033979|593|Puscifer                  |\"C\"_is_for_(Please_Insert_Sophomoric_Genitalia_Reference_HERE)|link   |\n|null    |25033979|36 |other-wikipedia           |\"C\"_is_for_(Please_Insert_Sophomoric_Genitalia_Reference_HERE)|other  |\n|null    |25033979|93 |other-google              |\"C\"_is_for_(Please_Insert_Sophomoric_Genitalia_Reference_HERE)|other  |\n+--------+--------+---+--------------------------+--------------------------------------------------------------+-------+\nonly showing top 18 rows\n\n"
      },
      "dateCreated": "Apr 17, 2016 2:52:08 PM",
      "dateStarted": "Apr 17, 2016 2:52:24 PM",
      "dateFinished": "Apr 17, 2016 2:52:25 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md ### Counting the number of rows\r\nTo count how many rows a DataFrame has, just run myDf.count",
      "authenticationInfo": {},
      "dateUpdated": "Apr 17, 2016 2:52:41 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904744944_1100681343",
      "id": "20160417-145224_35596771",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eCounting the number of rows\u003c/h3\u003e\n\u003cp\u003eTo count how many rows a DataFrame has, just run myDf.count\u003c/p\u003e\n"
      },
      "dateCreated": "Apr 17, 2016 2:52:24 PM",
      "dateStarted": "Apr 17, 2016 2:52:38 PM",
      "dateFinished": "Apr 17, 2016 2:52:38 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "clickstreamDf.count",
      "authenticationInfo": {},
      "dateUpdated": "Apr 17, 2016 2:52:59 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904758451_-1572538691",
      "id": "20160417-145238_1833770681",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res10: Long \u003d 199\n"
      },
      "dateCreated": "Apr 17, 2016 2:52:38 PM",
      "dateStarted": "Apr 17, 2016 2:53:00 PM",
      "dateFinished": "Apr 17, 2016 2:53:01 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md If you just want to count non-null values for one column, you can use the \"count\" function\r\n\r\n\u003chttp://spark.apache.org/docs/latest/api/scala/#org.apache.spark.sql.functions$\u003e",
      "authenticationInfo": {},
      "dateUpdated": "Apr 17, 2016 2:53:19 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904779947_1453557381",
      "id": "20160417-145259_1362222365",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eIf you just want to count non-null values for one column, you can use the \u0026ldquo;count\u0026rdquo; function\u003c/p\u003e\n\u003cp\u003e\u003ca href\u003d\"http://spark.apache.org/docs/latest/api/scala/#org.apache.spark.sql.functions$\"\u003ehttp://spark.apache.org/docs/latest/api/scala/#org.apache.spark.sql.functions$\u003c/a\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "Apr 17, 2016 2:52:59 PM",
      "dateStarted": "Apr 17, 2016 2:53:16 PM",
      "dateFinished": "Apr 17, 2016 2:53:16 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import org.apache.spark.sql.functions.count\r\nclickstreamDf.select(count(\u0027prev_id)).show",
      "authenticationInfo": {},
      "dateUpdated": "Apr 17, 2016 2:53:33 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904796009_-1011327963",
      "id": "20160417-145316_712794052",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.sql.functions.count\n+--------------+\n|count(prev_id)|\n+--------------+\n|           130|\n+--------------+\n\n"
      },
      "dateCreated": "Apr 17, 2016 2:53:16 PM",
      "dateStarted": "Apr 17, 2016 2:53:33 PM",
      "dateFinished": "Apr 17, 2016 2:53:34 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md ### Getting some basic information on columns\r\nSometimes, you\u0027ll want to quickly get some insights on a column. The describe method is intended for numeric columns, even though it will return some values for non-numeric columns. It is important that the \"count\" we get for the column here actually counts non-null rows, that\u0027s why it\u0027s not equal for all of the columns",
      "authenticationInfo": {},
      "dateUpdated": "Apr 17, 2016 2:53:52 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904813489_531176350",
      "id": "20160417-145333_994621534",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eGetting some basic information on columns\u003c/h3\u003e\n\u003cp\u003eSometimes, you\u0027ll want to quickly get some insights on a column. The describe method is intended for numeric columns, even though it will return some values for non-numeric columns. It is important that the \u0026ldquo;count\u0026rdquo; we get for the column here actually counts non-null rows, that\u0027s why it\u0027s not equal for all of the columns\u003c/p\u003e\n"
      },
      "dateCreated": "Apr 17, 2016 2:53:33 PM",
      "dateStarted": "Apr 17, 2016 2:53:49 PM",
      "dateFinished": "Apr 17, 2016 2:53:49 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "clickstreamDf.describe(\"prev_id\", \"prev_title\", \"n\").show",
      "authenticationInfo": {},
      "dateUpdated": "Apr 17, 2016 2:54:06 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904829759_-1530677681",
      "id": "20160417-145349_118168392",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "+-------+--------------------+------------+------------------+\n|summary|             prev_id|  prev_title|                 n|\n+-------+--------------------+------------+------------------+\n|  count|                 130|         199|               199|\n|   mean|   7704131.223076923|        null|138.05527638190955|\n| stddev|1.1899559886419423E7|        null| 526.0674976470273|\n|    min|                4499|          !!|                10|\n|    max|            44789934|ǃKung_people|              6820|\n+-------+--------------------+------------+------------------+\n\n"
      },
      "dateCreated": "Apr 17, 2016 2:53:49 PM",
      "dateStarted": "Apr 17, 2016 2:54:06 PM",
      "dateFinished": "Apr 17, 2016 2:54:07 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md ### Sampling\r\nEven though we won\u0027t need it for this training, it can be faster to work on a small subset of the data, if you just want to make some tests. You can use the \"sample\" method for that. It takes two parameters:\r\n- withReplacement: true / false\r\n- fraction: The percentage of the data that we want to take\r\n- We can optionally add a seed, if we want to make sure we always get the same sample.",
      "authenticationInfo": {},
      "dateUpdated": "Apr 17, 2016 2:54:22 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904846053_677811654",
      "id": "20160417-145406_1947091368",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eSampling\u003c/h3\u003e\n\u003cp\u003eEven though we won\u0027t need it for this training, it can be faster to work on a small subset of the data, if you just want to make some tests. You can use the \u0026ldquo;sample\u0026rdquo; method for that. It takes two parameters:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ewithReplacement: true / false\u003c/li\u003e\n\u003cli\u003efraction: The percentage of the data that we want to take\u003c/li\u003e\n\u003cli\u003eWe can optionally add a seed, if we want to make sure we always get the same sample.\u003c/li\u003e\n\u003c/ul\u003e\n"
      },
      "dateCreated": "Apr 17, 2016 2:54:06 PM",
      "dateStarted": "Apr 17, 2016 2:54:19 PM",
      "dateFinished": "Apr 17, 2016 2:54:19 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "clickstreamDf.sample(withReplacement \u003d false, fraction \u003d 0.1).show(5)\r\n// Running the same again will probably show different results...\r\nclickstreamDf.sample(withReplacement \u003d false, fraction \u003d 0.1).show(5)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 17, 2016 2:54:43 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904859358_1909609066",
      "id": "20160417-145419_1873622530",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "+--------+--------+---+--------------------+--------------------+-------+\n| prev_id| curr_id|  n|          prev_title|          curr_title|   type|\n+--------+--------+---+--------------------+--------------------+-------+\n|    null| 9003666|109|     other-wikipedia|\"And\"_theory_of_c...|  other|\n|    null| 9003666| 18|        other-google|\"And\"_theory_of_c...|  other|\n|28639397|25033979| 73|Sound_into_Blood_...|\"C\"_is_for_(Pleas...|   link|\n| 1438509|    null| 14|List_of_Old_West_...|\"Cool_Hand_Conor\"...|redlink|\n|  865241|  331586| 10|    Crocodile_Hunter|  \"Crocodile\"_Dundee|  other|\n+--------+--------+---+--------------------+--------------------+-------+\nonly showing top 5 rows\n\n+-------+--------+---+--------------------+--------------------+-----+\n|prev_id| curr_id|  n|          prev_title|          curr_title| type|\n+-------+--------+---+--------------------+--------------------+-----+\n|   null|39072529| 49|        other-google|\"Bassy\"_Bob_Brock...|other|\n|4619790|25033979|593|            Puscifer|\"C\"_is_for_(Pleas...| link|\n|   null|25033979| 36|     other-wikipedia|\"C\"_is_for_(Pleas...|other|\n|2564144|  331586|154|Crocodile_Dundee_...|  \"Crocodile\"_Dundee| link|\n|8078282|  331586|348|Australia_(Some(2...|  \"Crocodile\"_Dundee| link|\n+-------+--------+---+--------------------+--------------------+-----+\nonly showing top 5 rows\n\n"
      },
      "dateCreated": "Apr 17, 2016 2:54:19 PM",
      "dateStarted": "Apr 17, 2016 2:54:43 PM",
      "dateFinished": "Apr 17, 2016 2:54:44 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md If you want to get the same sample twice, you should use the seed parameter.",
      "authenticationInfo": {},
      "dateUpdated": "Apr 17, 2016 2:55:06 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904883452_1227864663",
      "id": "20160417-145443_1605755273",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eIf you want to get the same sample twice, you should use the seed parameter.\u003c/p\u003e\n"
      },
      "dateCreated": "Apr 17, 2016 2:54:43 PM",
      "dateStarted": "Apr 17, 2016 2:55:03 PM",
      "dateFinished": "Apr 17, 2016 2:55:03 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "clickstreamDf.sample(withReplacement \u003d false, fraction \u003d 0.1, seed \u003d 42L).show(5)\r\n// We will get the same sample, because we use the same seed\r\nclickstreamDf.sample(withReplacement \u003d false, fraction \u003d 0.1, seed \u003d 42L).show(5)",
      "authenticationInfo": {},
      "dateUpdated": "Apr 17, 2016 2:55:18 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904903526_-969790406",
      "id": "20160417-145503_908791129",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "+--------+--------+---+--------------------+--------------------+-------+\n| prev_id| curr_id|  n|          prev_title|          curr_title|   type|\n+--------+--------+---+--------------------+--------------------+-------+\n|  113468|25033979| 24|         The_Mission|\"C\"_is_for_(Pleas...|   link|\n|  159547|25033979| 25|      Milla_Jovovich|\"C\"_is_for_(Pleas...|  other|\n|28639397|25033979| 73|Sound_into_Blood_...|\"C\"_is_for_(Pleas...|   link|\n| 1438509|    null| 14|List_of_Old_West_...|\"Cool_Hand_Conor\"...|redlink|\n| 1248074|  331586| 60|      David_Gulpilil|  \"Crocodile\"_Dundee|   link|\n+--------+--------+---+--------------------+--------------------+-------+\nonly showing top 5 rows\n\n+--------+--------+---+--------------------+--------------------+-------+\n| prev_id| curr_id|  n|          prev_title|          curr_title|   type|\n+--------+--------+---+--------------------+--------------------+-------+\n|  113468|25033979| 24|         The_Mission|\"C\"_is_for_(Pleas...|   link|\n|  159547|25033979| 25|      Milla_Jovovich|\"C\"_is_for_(Pleas...|  other|\n|28639397|25033979| 73|Sound_into_Blood_...|\"C\"_is_for_(Pleas...|   link|\n| 1438509|    null| 14|List_of_Old_West_...|\"Cool_Hand_Conor\"...|redlink|\n| 1248074|  331586| 60|      David_Gulpilil|  \"Crocodile\"_Dundee|   link|\n+--------+--------+---+--------------------+--------------------+-------+\nonly showing top 5 rows\n\n"
      },
      "dateCreated": "Apr 17, 2016 2:55:03 PM",
      "dateStarted": "Apr 17, 2016 2:55:18 PM",
      "dateFinished": "Apr 17, 2016 2:55:19 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md ### What\u0027s going on under the hoods?\r\nThe \"explain\" command gives information about the different plans of the DataFrame, or to put it in another way, about the different stages that will happen when we run an action over the DataFrame. By default, it will show only the Physical Plan, but we can use explain(true) if we wanted to see all of the plans.\r\n\r\nLet\u0027s compare the physical plans of the \"clickstreamDf\" another DataFrame that filters and selects some fields.\r\n\r\nYou can find a more detailed explanation on the plans and Catalyst optimizer here:\r\n\r\n\u003chttps://databricks.com/blog/2015/04/13/deep-dive-into-spark-sqls-catalyst-optimizer.html\u003e",
      "authenticationInfo": {},
      "dateUpdated": "Apr 17, 2016 2:55:37 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904918645_2049734286",
      "id": "20160417-145518_1722180909",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eWhat\u0027s going on under the hoods?\u003c/h3\u003e\n\u003cp\u003eThe \u0026ldquo;explain\u0026rdquo; command gives information about the different plans of the DataFrame, or to put it in another way, about the different stages that will happen when we run an action over the DataFrame. By default, it will show only the Physical Plan, but we can use explain(true) if we wanted to see all of the plans.\u003c/p\u003e\n\u003cp\u003eLet\u0027s compare the physical plans of the \u0026ldquo;clickstreamDf\u0026rdquo; another DataFrame that filters and selects some fields.\u003c/p\u003e\n\u003cp\u003eYou can find a more detailed explanation on the plans and Catalyst optimizer here:\u003c/p\u003e\n\u003cp\u003e\u003ca href\u003d\"https://databricks.com/blog/2015/04/13/deep-dive-into-spark-sqls-catalyst-optimizer.html\"\u003ehttps://databricks.com/blog/2015/04/13/deep-dive-into-spark-sqls-catalyst-optimizer.html\u003c/a\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "Apr 17, 2016 2:55:18 PM",
      "dateStarted": "Apr 17, 2016 2:55:33 PM",
      "dateFinished": "Apr 17, 2016 2:55:33 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "clickstreamDf.explain",
      "authenticationInfo": {},
      "dateUpdated": "Apr 30, 2016 12:17:50 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904933664_-214730818",
      "id": "20160417-145533_1098684057",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "\u003d\u003d Physical Plan \u003d\u003d\nScan ParquetRelation[prev_id#18,curr_id#19,n#20,prev_title#21,curr_title#22,type#23] InputPaths: file:/data/clickstream_df.parquet\n"
      },
      "dateCreated": "Apr 17, 2016 2:55:33 PM",
      "dateStarted": "Apr 30, 2016 12:17:50 PM",
      "dateFinished": "Apr 30, 2016 12:17:51 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md The physical plan will get way more verbose quite quickly..",
      "authenticationInfo": {},
      "dateUpdated": "Apr 30, 2016 12:17:59 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904950909_1555529519",
      "id": "20160417-145550_707833636",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eThe physical plan will get way more verbose quite quickly..\u003c/p\u003e\n"
      },
      "dateCreated": "Apr 17, 2016 2:55:50 PM",
      "dateStarted": "Apr 30, 2016 12:17:59 PM",
      "dateFinished": "Apr 30, 2016 12:17:59 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "clickstreamDf\r\n  .filter(\"curr_id % 2 \u003d 0\")\r\n  .select(\"type\")\r\n  .distinct\r\n  .explain",
      "authenticationInfo": {},
      "dateUpdated": "Apr 30, 2016 12:18:46 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460904969058_-1378919693",
      "id": "20160417-145609_1534116739",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "\u003d\u003d Parsed Logical Plan \u003d\u003d\nAggregate [type#23], [type#23]\n+- Project [type#23]\n   +- Filter ((curr_id#19 % 2) \u003d 0)\n      +- Relation[prev_id#18,curr_id#19,n#20,prev_title#21,curr_title#22,type#23] ParquetRelation\n\n\u003d\u003d Analyzed Logical Plan \u003d\u003d\ntype: string\nAggregate [type#23], [type#23]\n+- Project [type#23]\n   +- Filter ((curr_id#19 % 2) \u003d 0)\n      +- Relation[prev_id#18,curr_id#19,n#20,prev_title#21,curr_title#22,type#23] ParquetRelation\n\n\u003d\u003d Optimized Logical Plan \u003d\u003d\nAggregate [type#23], [type#23]\n+- Project [type#23]\n   +- Filter ((curr_id#19 % 2) \u003d 0)\n      +- Relation[prev_id#18,curr_id#19,n#20,prev_title#21,curr_title#22,type#23] ParquetRelation\n\n\u003d\u003d Physical Plan \u003d\u003d\nTungstenAggregate(key\u003d[type#23], functions\u003d[], output\u003d[type#23])\n+- TungstenExchange hashpartitioning(type#23,200), None\n   +- TungstenAggregate(key\u003d[type#23], functions\u003d[], output\u003d[type#23])\n      +- Project [type#23]\n         +- Filter ((curr_id#19 % 2) \u003d 0)\n            +- Scan ParquetRelation[type#23,curr_id#19] InputPaths: file:/data/clickstream_df.parquet\n"
      },
      "dateCreated": "Apr 17, 2016 2:56:09 PM",
      "dateStarted": "Apr 30, 2016 12:18:24 PM",
      "dateFinished": "Apr 30, 2016 12:18:24 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460905083740_-466879265",
      "id": "20160417-145803_435978712",
      "dateCreated": "Apr 17, 2016 2:58:03 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Intro to DataFrames - 1 Exploring DataFrames",
  "id": "2BGJMERQ3",
  "angularObjects": {
    "2BJJ4DB1J": [],
    "2BKFHDDUC": [],
    "2BNFM2KRQ": [],
    "2BKRZNXQD": [],
    "2BJU5CCXF": [],
    "2BJ2B46AA": [],
    "2BJX2UD6X": [],
    "2BKZ8UWDJ": [],
    "2BK5XKAC4": [],
    "2BHYVYJ9W": [],
    "2BN7KBDKU": [],
    "2BJPGSRH5": [],
    "2BKU1V2HH": [],
    "2BJF4SGRM": [],
    "2BN8MFDMC": [],
    "2BM2EZWKG": [],
    "2BMY1AQGH": [],
    "2BNENARYG": []
  },
  "config": {},
  "info": {}
}